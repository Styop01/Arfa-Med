# The .env file is a hidden file that is used to pass environment variables to
# the application. This file is secret, no one but you can access it, and it
# can be used to store data that you want to keep private or hidden. For
# example, you can store API keys from external services or the database URI.
# You can also use it to store configuration options. By setting configuration
# options, you can change the behavior of the application, without the need to
# rewrite some code.
#
ALLOWED_HOSTS=localhost,localhost,127.0.0.1,0.0.0.0

# The environment variables are accessible from the app as
# os.getenv('VAR_NAME'). The object is a global Python object, and variables
# are passed as strings. By convention, the variable names are all uppercase,
# with words separated by an underscore. The .env is a shell file, so you donâ€™t
# need to wrap names or values in quotes. It is also important to note that
# there cannot be space around the equals sign when you are assigning values
# to the variables, e.g. VAR_NAME=value. Usually, you will put each variable
# definition on a separate line.

#
# API settings envirement example file for the custome configuration
#
ENV=development

#
# When debug mode is enabled, FastAPI provides detailed error messages that
# can help developers quickly identify the source of any issues in their code.
# The framework also automatically reloads the application whenever changes
# are made to the source code, making it easy to test changes and see the
# results in real-time.
#
# However, it's important to note that the DEBUG mode should only be used
# during development, as it can potentially expose sensitive information and
# reduce the security of the application. Therefore, when deploying the
# application to production, it's essential to disable DEBUG mode and follow
# best practices for securing the application.
#
DEBUG=True

#
# Database Configuration
#
# The following configuration values exist for FastAPI-SQLAlchemy.
# FastAPI-SQLAlchemy loads these values from the main FastAPI config which can
# be populated in various ways. Note that some of those cannot be modified
# after the engine was created so make sure to configure as early as
# possible and to not modify them at runtime.txt.
#
# DB_URL="postgresql+asyncpg://USER:PASSWORD@localhost/DB_NAME"

# When configuring an email sender using a .env file, you typically store
#email-related settings and credentials as environment variables. A
# .env file is a plain text file that contains key-value pairs, with each
# pair representing an environment variable.
# SMTP_USERNAME='email@domain.name'
# SMTP_PASSWORD='lgcepmxsaohcobxh'
# SENDER_EMAIL='Email Sender <email@domain.name>'
# SMTP_PORT=465
# SMTP_SERVER='smtp.gmail.com'
# Let's break down the key-value pairs:
#
#     SMTP_SERVER: This variable holds the address of SMTP server.
#                  For example, "smtp.example.com" represents the SMTP
#                  server provided by email service provider.
#
#     SMTP_PORT: This variable specifies the port number for SMTP
#                server. Common values are 587 (TLS/STARTTLS) or 465 (SSL).
#
#     SMTP_USERNAME: Here, you store the username or email address associated
#                    with email account. It is the credential used for
#                    authentication with the SMTP server.
#
#     SMTP_PASSWORD: This variable holds the password associated
#                    with the SMTP_USERNAME. It is the credential
#                    used for authentication with the SMTP server.
#
#     SENDER_EMAIL: Here, you store the email address you want to use as the
#                   sender.
#
# To use these variables in email sender code or application, you would
# typically read the values from the .env file and use them accordingly. The
# specific method for reading environment variables from a .env file depends
# on the programming language or framework you are using.
#
# Remember to keep .env file secure and never share it publicly, as it
# contains sensitive information like passwords. Also, make sure to follow
# best practices for securing and managing environment variables in
# development and deployment environments.

OPENAI_API_KEY=''

#
# JWT Access Secret
#
# The JWT access secret, denoted as JWT_ACCESS_SECRET, is used for signing
# and verifying JWTs in an application. It plays a crucial role in
# ensuring the integrity and authenticity of the information contained
# within the JWT.
#
# Automatic Secret Generation
#
# If the JWT_ACCESS_SECRET is not explicitly set in an
# configuration, a mechanism is in place to automatically generate a secret
# key for you. This ensures that an application can seamlessly use JWTs
# without requiring manual intervention for secret key management.
#
#
# Generation Process
#
# The automatic generation process follows these key steps:
#
#     Secure Random Generation: A cryptographically secure random string is
#                               generated to serve as the JWT access secret.
#                               This string is designed to be highly
#                               unpredictable, enhancing the security of the
#                               JWTs.
#
#     Storage: The automatically generated JWT access secret is securely
#              stored within an runtime.txt environment. The
#              exact storage method may vary based on an
#              configuration, but it is designed to prioritize security and
#              confidentiality.
#
#     Usage: The generated JWT access secret is automatically used for
#            signing and verifying JWTs in an application. This process
#            occurs transparently, allowing you to focus on the
#            functionality of an application without the need to manage
#            secret keys manually.
#
#
# Manual Override
#
# If, for any reason, you prefer to set the JWT access secret manually,
# you have the option to do so by explicitly configuring the
# JWT_ACCESS_SECRET variable in an settings or environment
# variables. This manual override allows you to have more control over the
# secret key used in the JWT processes.
#
# Security Considerations
#
#     Secure Generation: The automatic generation process ensures that the
#                        JWT access secret is created using secure, random
#                        methods, reducing the risk of predictability or
#                        vulnerability.
#
#     Key Rotation: Even if the secret is automatically generated, consider
#                   implementing a key rotation policy to periodically
#                   update the JWT access secret for enhanced security.
#
#     Storage Best Practices: If you choose to set the secret manually,
#                             ensure that it is stored securely, following
#                             best practices for key management. Avoid
#                             hardcoding secrets in code or exposing them in
#                             insecure locations.
#
JWT_ACCESS_SECRET=''
#
# JWT Algorithm
#
# Configuration Options
#
# Default Algorithm
#
# If the JWT_ALGORITHM is not explicitly set in an
# configuration, a default algorithm is used. The default algorithm is
# carefully chosen to balance security and performance considerations. The
# specific default algorithm may vary depending on an application
# framework or library.
#
# Manual Configuration
#
# You have the option to manually configure the JWT_ALGORITHM variable in
# an settings or environment variables. This manual override allows you to
# select a specific JWT algorithm based on security requirements and
# infrastructure.
#
# When manually configuring the JWT_ALGORITHM, ensure that you choose an
# algorithm that aligns with security policy and the capabilities of
# the systems involved in JWT verification.
#
# Example Manual Configuration:
#
# JWT_ALGORITHM='HS256'
#
# Supported Algorithms
#
# The supported JWT algorithms depend on the JWT library or framework used
# in an application. Commonly supported algorithms include:
#
#     HS256: HMAC using SHA-256
#     HS384: HMAC using SHA-384
#     HS512: HMAC using SHA-512
#     RS256: RSA using SHA-256
#     RS384: RSA using SHA-384
#     RS512: RSA using SHA-512
#     ES256: ECDSA using SHA-256
#     ES384: ECDSA using SHA-384
#     ES512: ECDSA using SHA-512
#
# Refer to specific JWT library or framework documentation for a
# comprehensive list of supported algorithms.
#
# Security Considerations
#
#     Algorithm Strength: Choose a JWT algorithm that provides an appropriate
#                         balance between security and performance. More
#                         robust algorithms generally offer higher security
#                         but may have increased computational overhead.
#
#     Key Management: The choice of algorithm may impact key management
#                     practices. Ensure that the selected algorithm aligns
#                     with key generation, storage, and rotation
#                     policies.
#
#     Update and Compatibility: If you plan to change the JWT algorithm,
#                               consider the impact on existing tokens and
#                               systems. Ensure that all components involved
#                               in JWT verification support the selected
#                               algorithm.
#
#     Documentation Reference: Clearly document the chosen JWT algorithm in an
#                              application documentation, and provide
#                              guidance on how to configure or modify it
#                              based on security requirements.
#
JWT_ALGORITHM='HS256'

# ACCESS_TOKEN_EXPIRE_TIME Documentation
#
# Overview:
#   The ACCESS_TOKEN_EXPIRE_TIME parameter is a configuration variable used
#   in authentication systems to define the duration of validity for access
#   tokens. Access tokens are tokens that are issued by an authorization
#   server and are used to access protected resources on behalf of a user or
#   client.
#
#
# Purpose:
#   The primary purpose of the ACCESS_TOKEN_EXPIRE_TIME parameter is to
#   enhance the security of the authentication process by setting a time
#   limit on the validity of access tokens. This helps mitigate the risk
#   associated with compromised tokens and reduces the window of opportunity
#   for unauthorized access.
#
#
# Configuration:
#   The ACCESS_TOKEN_EXPIRE_TIME parameter is typically set as an
#   environment variable in the configuration settings of an application or
#   service. The value assigned to this variable represents the duration,
#   in seconds, for which an access token remains valid.
#
#
# Usage:
#   When a user or client successfully authenticates and obtains an access
#   token, the system uses the ACCESS_TOKEN_EXPIRE_TIME value to calculate
#   the expiration time of the token. After this duration has elapsed,
#   the token is considered invalid, and the user or client must
#   re-authenticate to obtain a new access token.
#
#
# Best Practices
#     Reasonable Expiration Time:
#       Choose an expiration time that balances security and usability.
#       Short expiration times enhance security but may result in a more
#       frequent need for re-authentication, impacting user experience.
#
#     Token Refresh Mechanism:
#       Implement a token refresh mechanism to allow clients to obtain a new
#       access token without requiring the user to re-enter credentials.
#       This can be done using refresh tokens.
#
#     Dynamic Configuration:
#       Consider making the ACCESS_TOKEN_EXPIRE_TIME configurable, allowing
#       administrators to adjust the expiration time based on security
#       policies and requirements.
#
#
# Security Considerations
#
#     Short Expiration Times:
#       While short expiration times enhance security, they may also lead to
#       more frequent authentication requests, impacting system performance.
#
#     Token Revocation:
#       Implement mechanisms to revoke access tokens in case of security
#       incidents or user logout to ensure immediate termination of access.
#
#     Token Renewal:
#       Provide a seamless process for token renewal to minimize disruption
#       for users and clients.
#
# uncomment necessary verification
# VERIFICATION_DAYS=
# VERIFICATION_SECONDS=
VERIFICATION_MINUTES=30
